//const { GoogleSpreadsheet } = require('google-spreadsheet');
//const doc = new GoogleSpreadsheet('1jW6jvUXP8aSYcSMh7RDLp1_OXo0Rg4g9fMkFmS90hkM');

window.onload = function() {
	const useNodeJS = true;   // if you are not using a node server, set this value to false
    const defaultLiffId = "";   // change the default LIFF value if you are not using a node server
    // DO NOT CHANGE THIS
    let myLiffId = "";
	var usetID;
    // if node is used, fetch the environment variable and pass it to the LIFF method
    // otherwise, pass defaultLiffId
    if (useNodeJS) {
        fetch('/send-id')
            .then(function(reqResponse) {
                return reqResponse.json();
            })
            .then(function(jsonResponse) {
                myLiffId = jsonResponse.id;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function(error) {
                document.getElementById("liffAppContent").classList.add('hidden');
                document.getElementById("nodeLiffIdErrorMessage").classList.remove('hidden');
            });
    } else {
        myLiffId = defaultLiffId;
        initializeLiffOrDie(myLiffId);
    }
};

/**
* Check if myLiffId is null. If null do not initiate liff.
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (!myLiffId) {
        document.getElementById("liffAppContent").classList.add('hidden');
        document.getElementById("liffIdErrorMessage").classList.remove('hidden');
    } else {
        initializeLiff(myLiffId);
    }
}

/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api
            initializeApp();
        })
        .catch((err) => {
            document.getElementById("liffAppContent").classList.add('hidden');
            document.getElementById("liffInitErrorMessage").classList.remove('hidden');
        });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
	
	liff.getProfile()
	.then(profile => {
		usetID = profile.userId
	})
	.catch((err) => {
	  console.log('error', err);
	});
	
    registerButtonHandlers();

}

/**
* Display data generated by invoking LIFF methods
*/

/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/


/**
* Register event handlers for the buttons displayed in the app
*/



function registerButtonHandlers() {
    // scanCode call
    document.getElementById('scanQrCodeButton').addEventListener('click', function() {
        if (!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            liff.scanCode().then(result => {
                // e.g. result = { value: "Hello LIFF app!" }
                //const stringifiedResult = JSON.stringify(result);
                //document.getElementById('scanQrField').textContent = stringifiedResult;
				if(result.value == "123456"){
					accessSpreadsheet();			
				}
                toggleQrCodeReader();
            }).catch(err => {
                document.getElementById('scanQrField').textContent = "scanCode failed!";
            });
        }
    });


}

/**
* Alert the user if LIFF is opened in an external browser and unavailable buttons are tapped
*/
function sendAlertIfNotInClient() {
    alert('This button is unavailable as LIFF is currently being opened in an external browser.');
}

/**
* Toggle access token data field
*/
function toggleAccessToken() {
    toggleElement('accessTokenData');
}

/**
* Toggle profile info field
*/
function toggleProfileData() {
    toggleElement('profileInfo');
}

/**
* Toggle scanCode result field
*/
function toggleQrCodeReader() {
    toggleElement('scanQr');
}

/**
* Toggle specified element
* @param {string} elementId The ID of the selected element
*/
function toggleElement(elementId) {
    const elem = document.getElementById(elementId);
    if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {
        elem.style.display = 'none';
    } else {
        elem.style.display = 'block';
    }
}


async function accessSpreadsheet(){
	await doc.useServiceAccountAuth(require('./client_secret.json'));
	await doc.loadInfo();
	const sheet = doc.sheetsByIndex[0];
	const rows = await sheet.getRows();
	var rowNum = sheet.rowCount;
	for ( i=0 ; i < (rowNum-1) ; i++ ){
		if(rows[i].userid==usetID){			
			var num = parseInt(rows[i].point,10);
			num+=10;
			rows[i].point = num;
			await rows[i].save();
			liff.sendMessages([{
				'type': 'text',
				'text': 'Success!'
			}]).then(function() {
				window.alert('You got the point!!');
			}).catch(function(error) {
				window.alert('Error sending message: ' + error);
			});					
			break;
		}
	}
}